package org.itmo;

import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

import lombok.extern.slf4j.Slf4j;

@Slf4j
class Graph {
    private final int V;
    private final ArrayList<Integer>[] adjList;

    private final ExecutorService executorService = Executors.newFixedThreadPool(14);

    Graph(int vertices) {
        this.V = vertices;
        adjList = new ArrayList[vertices];
        for (int i = 0; i < vertices; ++i) {
            adjList[i] = new ArrayList<>();
        }
    }

    void addEdge(int src, int dest) {
        if (!adjList[src].contains(dest)) {
            adjList[src].add(dest);
        }
    }

    void parallelBFS(int startVertex) throws InterruptedException, ExecutionException {
        // AtomicInteger visitedNum = new AtomicInteger(1);

        AtomicBoolean[] visited = new AtomicBoolean[V];
        for (int i = 0; i < V; ++i) {
            visited[i] = new AtomicBoolean(false);
        }

        List<Integer> layer = new LinkedList<>();

        visited[startVertex].set(true);
        layer.add(startVertex);

        // int layerNum = 0;

        while (!layer.isEmpty()) {
            // log.info("Visiting layer: {}", layerNum);
            // List<Integer> nextLayer = new LinkedList<>();

            // List<Future<List<Integer>>> futures = new ArrayList<>(layer.size());

            layer = layer.parallelStream()
                    .map(vertex -> executorService.submit(() -> visitChildrenOf(vertex, visited)))
                    .map(future -> {
                        try {
                            return future.get();
                        } catch (Exception e) {
                            log.error("Future error", e);
                            return null;
                        }
                    })
                    .flatMap(List::stream).parallel()
                    .collect(Collectors.toList());

            // while (!layer.isEmpty()) {
            // int vertex = layer.poll();

            // Future<List<Integer>> future = ;

            // futures.add(future);
            // }

            // layer = nextLayer;

            // for (Future<List<Integer>> future : futures) {
            /* List<Integer> vertices = */
            // future.get();
            // layer.addAll(vertices);
            // }

            // ++layerNum;
        }
    }

    List<Integer> visitChildrenOf(int vertex, AtomicBoolean[] visited) {
        List<Integer> next = new LinkedList<>();

        for (int n : adjList[vertex]) {
            if (!visited[n].compareAndSet(false, true)) {
                continue;
            }

            next.add(n);
        }

        return next;
    }

    // Generated by ChatGPT
    void bfs(int startVertex) {
        boolean[] visited = new boolean[V];

        LinkedList<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            startVertex = queue.poll();

            for (int n : adjList[startVertex]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }

}
