package org.itmo;

import java.util.*;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;

import lombok.extern.slf4j.Slf4j;

@Slf4j
class Graph {
    private final int V;
    private final ArrayList<Integer>[] adjList;

    private final ExecutorService executorService = Executors.newFixedThreadPool(28);

    Graph(int vertices) {
        this.V = vertices;
        adjList = new ArrayList[vertices];
        for (int i = 0; i < vertices; ++i) {
            adjList[i] = new ArrayList<>();
        }
    }

    void addEdge(int src, int dest) {
        if (!adjList[src].contains(dest)) {
            adjList[src].add(dest);
        }
    }

    void parallelBFS(int startVertex) throws InterruptedException, ExecutionException {
        AtomicInteger visitedNum = new AtomicInteger(1);

        AtomicBoolean[] visited = new AtomicBoolean[V];
        for (int i = 0; i < V; ++i) {
            visited[i] = new AtomicBoolean(false);
        }

        List<Integer> layer = new ArrayList<>();

        visited[startVertex].set(true);
        layer.add(startVertex);

        // int layerNum = 0;

        while (!visitedNum.compareAndSet(V, V)) {
            // log.info("Visiting layer: {}", layerNum);

            List<Future<List<Integer>>> futures = new ArrayList<>(layer.size());

            for (int i = 0; i < layer.size(); ++i) {
                int vertex = layer.get(i);

                Future<List<Integer>> future = executorService
                        .submit(() -> visitChildrenOf(vertex, visited, visitedNum));

                futures.add(future);
            }

            layer = new ArrayList<>();

            for (Future<List<Integer>> future : futures) {
                List<Integer> vertices = future.get();
                layer.addAll(vertices);
            }

            // ++layerNum;
        }
    }

    List<Integer> visitChildrenOf(int vertex, AtomicBoolean[] visited, AtomicInteger visitedNum) {
        List<Integer> next = new ArrayList<>(adjList[vertex].size());

        for (int n : adjList[vertex]) {
            if (!visited[n].compareAndSet(false, true)) {
                continue;
            }

            // int totalVisited =
            visitedNum.incrementAndGet();
            // log.info("Visited vertex {}, total visited: {}/{}", n, totalVisited, V);

            next.add(n);
        }

        return next;
    }

    // Generated by ChatGPT
    void bfs(int startVertex) {
        boolean[] visited = new boolean[V];

        LinkedList<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            startVertex = queue.poll();

            for (int n : adjList[startVertex]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }

}
